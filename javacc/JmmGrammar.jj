PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;
TOKENS_ARE_NODES = false;

SKIP : <BLOCK_COMMENT: "/*" (~["/"])* "*/" > | <LINE_COMMENT : "//" (~["\n","\r"])*>  |  " " | "\t" | "\r" | "\n";

TOKEN :
	< IMPORT : "import" > |
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< EQUAL : "="> |
	< AND : "&&"> |
	< LESS_THAN : "<"> |
	< MORE_THAN : ">"> |
	< OPEN_BRACKETS : "["> |
	< CLOSE_BRACKETS : "]"> |
	< OPEN_CURLY_BRACKETS: "{">|
	< CLOSE_CURLY_BRACKETS: "}">|
	< TRUE : "true"> |
	< FALSE : "false"> |
	< THIS_TOKEN : "this" > |
	< INT : "int" >|
	< BOOLEAN_TOKEN : "boolean" > |
	< STRING : "String" > |
	< NEW : "new" > |
	< NOT : "!" > |
	< COMMA : "," > |
	< SEMI_COLON : ";" > |
	< PERIOD : "."> |
	< UNDERSCORE : "_" > |

	< LENGTH_TOKEN : "length" > |
	< IF : "if" > |
	< ELSE : "else" > |
	< THEN : "then" > |
	< WHILE : "while" > |


	< PUBLIC : "public"> |
	< PRIVATE : "private" > |
	< RETURN : "return" > |

	< STATIC : "static" > |
	< VOID : "void" > |
	< MAIN : "main" > | 
	< CLASS : "class" > |
	< EXTENDS : "extends" > |
	
	< OPEN_PAREN : "(" > |
	< CLOSE_PAREN : ")" > |
	< INTEGER_LITERAL : (["0" - "9"])+ > |
	< AT : "@" > |
    <IDENTIFIER_TOKEN: (["a"-"z"] | ["A"-"Z"] | "_")+ (["0" - "9"] | ["a"-"z"] | ["A"-"Z"] | "_")* >
;

Start : ImportDeclaration ClassDeclaration < EOF >;

IdentifierRule #Id:
	(<IDENTIFIER_TOKEN> {jjtThis.put("name", lastConsumedToken.getImage()); }) (AccessToArray)?
;

LengthRule #Length:
	<LENGTH_TOKEN>
;

Type #void: 
	< INT > (< OPEN_BRACKETS > < CLOSE_BRACKETS > #TypeArray)? #TypeInt  |
	< BOOLEAN_TOKEN > #TypeBoolean|
	< VOID > #TypeVoid|
	<STRING> (<OPEN_BRACKETS> <CLOSE_BRACKETS> #TypeArray)? #TypeString |
    IdentifierRule
;   

Condition #void:
	<OPEN_PAREN> Expression <CLOSE_PAREN>
;

WhileStatement:
	<WHILE> Condition Statement
;

IfStatement:
	<IF> Condition Statement (<ELSE> Statement)*
;

AccessToArray:
	<OPEN_BRACKETS> Expression <CLOSE_BRACKETS>
;

Equality:
	IdentifierRule <EQUAL> Expression <SEMI_COLON>
;

Statement #void:
	<OPEN_CURLY_BRACKETS> (Statement)* <CLOSE_CURLY_BRACKETS> #StatementBlock
	| IfStatement
	| WhileStatement
	| (LOOKAHEAD(2) Equality | (Expression <SEMI_COLON>))

;



ImportDeclaration : 
	(<IMPORT> IdentifierRule (<PERIOD> IdentifierRule)* <SEMI_COLON>)* 
;

ExtendsRule:
	<EXTENDS> IdentifierRule 
;

ClassDeclaration : 
	(<PUBLIC>)?<CLASS> IdentifierRule ( ExtendsRule )?  <OPEN_CURLY_BRACKETS>
	(VarDeclaration)*
	(MethodDeclaration)*
	<CLOSE_CURLY_BRACKETS>
;

Param: 
	Type <IDENTIFIER_TOKEN> ({jjtThis.put("name", lastConsumedToken.getImage()); })
;

Var: 
	Type <IDENTIFIER_TOKEN> ({jjtThis.put("name", lastConsumedToken.getImage()); })
;

ReturnRule:
	(<RETURN> Expression <SEMI_COLON>)
;

VarDeclaration #void: 
	Var<SEMI_COLON>
;
	
NormalMethod : 
	Type <IDENTIFIER_TOKEN>  ({jjtThis.put("name", lastConsumedToken.getImage()); jjtThis.put("isStatic", "false");}) <OPEN_PAREN> (Param ( <COMMA> Param)*)?<CLOSE_PAREN> 
	<OPEN_CURLY_BRACKETS>
	MethodBody
	(ReturnRule)?
	<CLOSE_CURLY_BRACKETS> 
;

MainMethod :
	<STATIC> <VOID> (<MAIN>  {jjtThis.put("name", lastConsumedToken.getImage()); jjtThis.put("isStatic", "true"); }) <OPEN_PAREN> Param  <CLOSE_PAREN> <OPEN_CURLY_BRACKETS>
	MethodBody
    
	<CLOSE_CURLY_BRACKETS>
;


MethodBody:
	(LOOKAHEAD VarDeclaration | Statement)*
;

MethodDeclaration #void: 
	<PUBLIC> (MainMethod | NormalMethod)
;

Expression #void:
	And
;

And #void:
	LessThan (LOOKAHEAD(2) <AND> LessThan #ANDD(2))*

;

LessThan #void:
	Sum ( LOOKAHEAD(2) <LESS_THAN> Sum #LESSTHAN(2))*
;

Sum #void:
	Sub (LOOKAHEAD(2) <PLUS> Sub #SUM(2))*
;

Sub #void:
	Mul (LOOKAHEAD(2) <MINUS> Sub #SUB(2))*
;

Mul #void:
	Div (LOOKAHEAD(2) <TIMES> Div #MUL(2))*
;

Div #void:
	DotExpression (LOOKAHEAD(2) <DIVIDE> DotExpression #DIV(2))*
;

DotExpression #void:
	Expression2  (LOOKAHEAD(2) ((<PERIOD> (LengthRule|IdentifierRule)	(<OPEN_PAREN>
											(Expression() 
												(<COMMA> Expression())*
											)?
											<CLOSE_PAREN>
								  		)?
								)#Identifier) #DotExpression(2))?
;

IntegerLiteral:
	(<INTEGER_LITERAL> {jjtThis.put("value", lastConsumedToken.getImage()); })
;

Expression2 #void:
	New
	| IdentifierRule
	| (<THIS_TOKEN> #This)
	| ((<TRUE> | <FALSE>) #Boolean)
	| IntegerLiteral
	| ( <NOT> DotExpression) #Negation
	| ( <OPEN_PAREN> Expression <CLOSE_PAREN>)
;

New #void:
	<NEW> (InitializeArray | NewObject)
;

InitializeArray:
	<INT> AccessToArray
;

NewObject:
	IdentifierRule <OPEN_PAREN> (Expression (<COMMA> Expression)*)? <CLOSE_PAREN>
;


// Injections for the implementation of JmmNode
// Since this is injected into BaseNode, it affects only non-terminals
INJECT BaseNode :
		import pt.up.fe.comp.jmm.ast.JmmNode;
		import pt.up.fe.comp.jmm.ast.AJmmNode;
		import pt.up.fe.specs.util.SpecsCollections;
		extends AJmmNode
{
    @Override
    public List<JmmNode> getChildren() {

        return SpecsCollections.cast(children(), JmmNode.class);
    }

    @Override
    public void add(JmmNode child, int index) {

        if (child instanceof Node) {

            addChild(index, (Node) child);
        } else {

            throw new RuntimeException("Node " + child + " is not a Node.");
        }

    }
}
